import 'package:flutter/material.dart';
import 'package:financeiro_familiar/services/notification_service.dart';
import 'package:financeiro_familiar/models/cartao.dart';

/// Script de teste para notifica√ß√µes
class NotificationTest {
  static Future<void> runTests() async {
    final notificationService = NotificationService();
    
    print('üî• Iniciando testes de notifica√ß√£o...\n');
    
    // Teste 1: Inicializa√ß√£o
    await _testInitialization(notificationService);
    
    // Teste 2: Permiss√µes
    await _testPermissions(notificationService);
    
    // Teste 3: Notifica√ß√£o de teste
    await _testBasicNotification(notificationService);
    
    // Teste 4: Notifica√ß√£o agendada
    await _testScheduledNotification(notificationService);
    
    // Teste 5: Verificar notifica√ß√µes pendentes
    await _testPendingNotifications(notificationService);
    
    print('\n‚úÖ Testes de notifica√ß√£o conclu√≠dos!');
  }
  
  static Future<void> _testInitialization(NotificationService service) async {
    print('üì± Teste 1: Inicializa√ß√£o do servi√ßo de notifica√ß√£o');
    try {
      await service.initialize();
      print('‚úÖ Servi√ßo inicializado com sucesso\n');
    } catch (e) {
      print('‚ùå Erro na inicializa√ß√£o: $e\n');
    }
  }
  
  static Future<void> _testPermissions(NotificationService service) async {
    print('üîê Teste 2: Verifica√ß√£o de permiss√µes');
    try {
      final granted = await service.requestPermissions();
      print('Permiss√µes concedidas: $granted');
      print(granted ? '‚úÖ Permiss√µes OK\n' : '‚ö†Ô∏è Permiss√µes negadas\n');
    } catch (e) {
      print('‚ùå Erro ao verificar permiss√µes: $e\n');
    }
  }
  
  static Future<void> _testBasicNotification(NotificationService service) async {
    print('üì≤ Teste 3: Notifica√ß√£o b√°sica (imediata)');
    try {
      await service.showTestNotification();
      print('‚úÖ Notifica√ß√£o de teste enviada\n');
    } catch (e) {
      print('‚ùå Erro ao enviar notifica√ß√£o de teste: $e\n');
    }
  }
  
  static Future<void> _testScheduledNotification(NotificationService service) async {
    print('‚è∞ Teste 4: Notifica√ß√£o agendada');
    try {
      // Criar um cart√£o de teste
      final cartaoTeste = Cartao(
        id: 'test_card_001',
        nome: 'Cart√£o de Teste',
        bandeira: 'visa',
        vencimentoDia: DateTime.now().add(const Duration(days: 5)).day,
        limite: 1000.0,
        faturaAtual: 250.0,
        userId: 'test_user',
      );
      
      await service.scheduleCardPaymentReminder(
        cardId: cartaoTeste.id,
        cardName: cartaoTeste.nome,
        dueDay: cartaoTeste.vencimentoDia,
        reminderDays: 2,
      );
      
      print('‚úÖ Notifica√ß√£o agendada para cart√£o: ${cartaoTeste.nome}');
      print('üìÖ Vencimento dia: ${cartaoTeste.vencimentoDia}');
      print('‚è±Ô∏è Lembrete: 2 dias antes\n');
    } catch (e) {
      print('‚ùå Erro ao agendar notifica√ß√£o: $e\n');
    }
  }
  
  static Future<void> _testPendingNotifications(NotificationService service) async {
    print('üìã Teste 5: Verificar notifica√ß√µes pendentes');
    try {
      final pending = await service.getPendingNotifications();
      print('Notifica√ß√µes pendentes: ${pending.length}');
      
      for (final notification in pending) {
        print('  - ID: ${notification.id}');
        print('    T√≠tulo: ${notification.title}');
        print('    Corpo: ${notification.body}');
        print('    Payload: ${notification.payload}');
      }
      
      print(pending.isEmpty ? '‚ö†Ô∏è Nenhuma notifica√ß√£o pendente\n' : '‚úÖ Notifica√ß√µes listadas\n');
    } catch (e) {
      print('‚ùå Erro ao verificar pendentes: $e\n');
    }
  }
  
  static Future<void> cancelAllTests(NotificationService service) async {
    print('üóëÔ∏è Cancelando todas as notifica√ß√µes de teste...');
    try {
      await service.cancelAllNotifications();
      print('‚úÖ Notifica√ß√µes canceladas\n');
    } catch (e) {
      print('‚ùå Erro ao cancelar: $e\n');
    }
  }
}